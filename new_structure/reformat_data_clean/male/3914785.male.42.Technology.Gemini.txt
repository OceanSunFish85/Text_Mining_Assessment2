validation tests tests measure aspect implementation behaviour expectation answer whether software complies expectation example test measures time required perform specific task validation test test measures time required perform specific task compares benchmark validation test one strong benefit using validation tests creating tests forces development team achieve detailed objective designs extends beyond coding team include program product management writing tests validate compliance requirements force product management articulate detailed objective requirements thinking requirements detail valuable thinking design detail design solid end poor solution good problem refactored requirement well understood end solution wrong problem difficult change two important types validation tests acceptance tests validate implementation compliance requirements unit tests validate implementation compliance design acceptance tests acceptance tests validate implementation compliance requirements one style development write detailed requirements translate requirements acceptance tests requirements sufficiently detailed acceptance tests flow freely requirements role team validate acceptance tests properly express requirements lightweight approach write less detailed requirements consider acceptance tests extension requirements document works well smaller organizations using lightweight approach important customer market facing contributors retain ownership expression requirements protocol seen work well program manager write requirements program manager negotiates acceptance tests programming team program manager owns definition acceptance tests programming team validates tests raising red flags concerns cannot connect dots requirements acceptance tests example programmer allowed reject acceptance test validates implementation rather requirement quite properly province unit tests issue program manager determine let review last point consider high level market requirements document mrd mean flesh mrd detail drill one requirements well mean write specs solution common pitfall asked detail product managers get sucked designing software detail mrd mean describe problem solved detail useful detail possible complete list acceptance tests writing acceptance test easy write sentence begins software acceptable make sure acceptance test implementation free like good requirement test detailed expansion requirement write many acceptance tests incredible leverage automate acceptance tests using tools like fitnesse unit tests unit tests validate implementation compliance design since requirements implementation free coupling definition unit tests definition acceptance tests unit tests express one one fact express abstract code written well chosen sufficient unit tests considered good quality likely delivered time high confidence customer market facing contributors program managers abstract interest unit tests reason unit test acceptance tests unit tests confused acceptance tests reasons design confused requirements project plan confused release plan technical management confused product management design one possible solution problem writing software complies requirements project plan one possible solution problem implementing design using available resources compliance release plan technical management art finding implementing solutions unit tests confused acceptance tests express requirement release plan possible completely refactor design project plan rewriting every single unit test without changing acceptance tests changes acceptance tests reflect changes product contract element plan record bugs defects release internal external tested bugs inevitable bug report expresses kind validation test negative software ought instead good bug report explains reproduce problem install software dual triton system less 4gb ram boot greedy mode validation test ideally test already expressed acceptance unit test practice bug report often expresses implicit test one spelled part process bad thing tests evolve team understanding evolves important distinguish bugs reflect shortcomings acceptance bugs reflect shortcomings design look bug reflects fundamental aspect requirements software need treat considerably care bug reflects shortcoming design call bugs defects defect must absolutely positively remedied software conform acceptance criteria done example may requirement aspect ui conform generally accepted principles say menu option displays shortcut key key work bug interesting write unit test bug pressing control j invoke jump command acceptance test acceptance test would every menu item displays shortcut key shortcut key invoke command generalization one way fix broken control j would display shortcut key menu software would still conform acceptance test would fail unit test bug reports excellent source acceptance criteria however product management development need analyze tests decide bugs defects extract acceptance criteria requirements need analyzed remove implementation design specifications end one anti pattern distinguish bugs reflect acceptance shortfalls bugs reflect implementation shortfalls paint corner cannot manage bug list try fix much hope best separate defects give special place process learning detailed requirements software b smaller list defects must absolutely positively fixed prioritizing defects bugs one excellent way raise chances shipping acceptable software time