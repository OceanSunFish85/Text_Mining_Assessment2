found iterating container extract something element place another container hard way std transform algorithm friend allows modify elements container based input another container example intwrapper h struct intwrapper int x yourcode cpp std vector wrappers std list numbers std vector const_iterator wrapperit wrappers begin wrapperit wrappers end wrapperit numbers push_back wrappers x uncommon situation better way intwrapper h struct intwrapper int x intwrapperhelpers h could also put intwrapper h even make member function intwrapper int extractx const intwrapper intwrapperhelpers cpp int extractx const intwrapper return wrapper x yourcode cpp std vector wrappers std list numbers std transform wrappers begin wrappers end std back_inserter numbers extractx although marginally one line code argue far superior solution starters need operation reuse extractx function secondly transform function self describing reading tell numbers going transformed way based elements wrappers simple iteration fist example requires delve code deduce finally extractx part intwrappers interface believe read scott meyers article non member functions improve encapsulation extraction knowledge encapsulated cleanly clients need know get x intwrapper anyway guideline whenever iterating container fill another container use transform always find saves time long run p another form transform fills output container based two input containers using similar single input container leave exploration algorithm exercise reader