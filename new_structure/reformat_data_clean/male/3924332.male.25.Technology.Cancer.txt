paper mq series api written wants start basics mq series mqseries api api supported mqseries known message queue interface mqi 11mqi function calls total allow programs connect disconnect queue managers open close queues open put message queue close queue put messages queues get messages queue browse leaving queue inquire attributes mqseries objects set attributes queues commit back changes made within unit work mqi provides structures order supply input get output calls also supplies large set named constants help construction options parameters calls definitions calls structures constants given header files supported programming languages mqi calls order program use queue must first connect local queue manager connected program able perform queue attribute message get put operations required without unit work control program terminates disconnects queue manager mqi calls briefly outlined following sections connecting queue manager using mqconn general possible connect either specific queue manager default one either case queue manager must local connecting program input mqconn queue manager name connect default queue manager call mqconn specifying name consisting entirely blanks starting null character output mqconn connection handle completion code reason code disconnecting programs queue manager using mqdisc program connected queue manager using mqconn call finished interaction queue manager must break connection using mqdisc call input mqdisc connection handle returned previous mqconn call output mqdisc completion code reason code input connection handle longer accepted mqi call opening queue using mqopen perform following operations relevant queue must first opened put messages onto queue get browse messages queue inquire set attributes queue use mqopen call open object using parameters options call specify actions performed queue exception want put single message queue close queue immediately afterwards case shorthand method performing open put close operation one mqput1 call outlined later input mqopen connection handle returned previous mqconn call description object opened passed using object descriptor structure mqod one options control action call open input output setting inquiring attributes output mqopen object handle represents requested access queue completion code reason code closing queues using mqclose program finished interaction queue closed using mqclose call input mqclose connection handle returned previous mqconn call object handle queue closed returned previous mqopen call output mqclose completion code reason code queue object descriptor longer valid accepted mqi call putting messages queue using mqput possible put messages queue application must connected queue manager must issued mqopen call open queue output use mqput place messages queue application call mqput repeatedly place many messages queue following initial mqopen call messages placed queue call mqclose application wishes place single message queue closes queue immediately afterwards possible replace mqopen mqput mqclose sequence single mqput1 call outlined later however application needs place one message queue efficient use mqput call input mqput connection handle returned previous mqconn call queue object handle returned previous mqopen call desired queue routing control information description message place queue form message descriptor structure mqmd queue access control information form put message options structure mqpmo length application data contained message message data output mqput completion code reason code call completes successfully also returns options structure message descriptor structure call modifies options structure show name queue queue manager message sent application requested queue manager generate contents message identifier field control information section message using constant mqmi_none call inserts value field structure returned application defined message identifier filling field prior making call value returned unchanged example program included end document illustrates use call reads ascii file turns line new message message written queue putting message queue using mqput1 use mqput1 call application closes queue immediately putting single message queue example server application likely use mqput1 call sending replies many different queues call functionally equivalent calling mqopen followed mqput mqclose difference syntax mqput mqput1 calls mqput queue object handle must supplied whereas mqput1 object descriptor structure supplied mqput1 call needs open relevant queue putting message whereas mqput call queue already open input mqput1 call connection handle returned previous mqconn call description queue opened output form object descriptor structure mqod routing control information description message place queue form message descriptor structure mqmd queue access control information form put message options structure mqpmo length application data contained message message data output mqput1 completion code reason code call completes successfully also returns options structure message descriptor structure call modifies options structure show name queue queue manager message sent application requested queue manager generate contents message identifier field control information section message using constant mqmi_none call inserts value field structure returned application defined message identifier filling field prior making call value returned unchanged example program included end document demonstrates use call reads oracle table one fields providing name queue receive rest row getting messages queue using mqget applications get messages queue ways removing message queue program see copying message leaving original queue technique known browsing application subsequently remove message needed cases application uses mqget call must first connected queue manager using mqconn opened queue input using mqopen queue opened mqget called repeatedly browse remove messages queue application calls mqclose application finished getting messages requires queue input mqget call connection handle returned previous mqconn call queue object handle returned previous mqopen call desired queue description message get queue form message descriptor structure mqmd queue access control information form get message options structure mqgmo size buffer assigned hold message address buffer output mqget completion code reason code message buffer specified call completed successfully message descriptor structure populated information message length application data message possible control messages retrieved queue via combination message descriptor structure options structure example whether poll wait message amount time wait seconds waiting selected message retrieved queue whether message removed copied whether get included within current unit work inquiring queue attributes using mqinq attributes properties define characteristics mqseries object including queues affect way object handled queue manager attributes set object initially defined changed via mqseries commands application inquire queue attributes using mqinq call mqi also provides mqset call outlined later order allow applications change queue attributes mqinq call uses array selectors identify attributes whose current values inquired selector attributes application work application use mqinq must first connected queue manager using mqconn opened queue inquiry using mqopen input mqinq call connection handle returned previous mqconn call queue object handle returned previous mqopen call desired queue number selectors attribute selector array array attribute selectors whose values set via mqseries named constants selector represents attribute whose current value inquired selectors specified order array number integer type attributes inquired specify zero integer type attributes specified selectors array address integer array enough elements hold output integer attribute values length character attributes buffer must least sum lengths required hold character attribute string inquired specify zero character type attributes inquired address character buffer hold returned attribute values output mqinq completion code reason code set integer attribute values copied specified integer array buffer character attribute values copied setting queue attributes using mqset applications change subset queue attributes using mqset call get inhibit put inhibit trigger control trigger type trigger depth trigger message priority trigger data mqset call parameters mqinq call however mqset parameters except completion code reason code input parameters input mqset call connection handle returned previous mqconn call queue object handle returned previous mqopen call desired queue number selectors attribute selector array array attribute selectors whose values set via mqseries named constants selector represents attribute whose current value set selectors specified order array number integer type attributes set specify zero integer type attributes specified selectors array address integer array contains integer attribute values length character attributes buffer must least sum lengths required hold character attribute string set specify zero character type attributes inquired address character buffer holds attribute values output mqset completion code reason code committing unit work using mqcmit program puts message gets message queue decide whether message included within current unit work decision reflected put message get message options structure passed mqput mqput1 mqget call message put queue within unit work made visible programs putting program commits unit work using mqcmit program detects error decides put operation made permanent back unit work using mqback outlined later similarly program gets message queue within unit work message remains queue program commits unit work message available retrieved programs default messages excluded current unit work therefore message included must done explicitly associated mqput mqput1 mqget call current unit work encompasses included messages sent received since last mqcmit mqback call input mqcmit call connection handle return previous mqconn call output mqcmit completion code reason code seen input mqcmit way specify single queue call means unit work covers queues opened using given connection handle therefore mqcmit called put get operations queues associated connection handle committed backing unit work using mqback program backs unit work mqseries restores queue state program performed first put get operation within unit work however operation performed outside unit work restored input mqback connection handle returned previous mqconn call output mqback completion code reason code seen input mqback way specify single queue call means unit work covers queues opened using given connection handle therefore mqback called put get operations queues associated connection handle backed sample code demonstrate working mq apis mqhconn hcon connection handle mqhobj hobj1 object handle queue mqhobj hobj2 object handle queue mqlong compcode reason return codes mqlong options mqod od1 mqod_default object descriptor queue mqod od2 mqod_default object descriptor queue mqmd md mqmd_default message descriptor mqpmo pmo mqpmo_default put message options mqgmo gmo mqpmo_default get message options connect application queue manager strcpy qmname myqmgr mqconn qmname hcon compcode reason open queue output strcpy od1 objectname queue1 mqopen hcon od1 mqoo_output hobj1 compcode reason put message queue mqput hcon hobj1 md pmo buffer compcode reason close output queue mqclose hcon hobj1 mqco_none compcode reason open input queue options mqoo_input_as_q_def strcpy od2 objectname queue2 mqopen hcon od2 options hobj2 compcode reason get message gmo options mqgmo_no_wait buflen sizeof buffer memcpy md msgid mqmi_none sizeof md msgid memset md correlid 0x00 sizeof mqbyte24 mqget hcon hobj2 md gmo buflen buffer compcode reason close input queue options mqclose hcon hobj2 options compcode reason disconnect queue manager mqdisc hcon compcode reason